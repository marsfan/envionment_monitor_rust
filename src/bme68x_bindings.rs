/* automatically generated by rust-bindgen 0.69.2 */
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(missing_docs_in_private_items)]
#![allow(missing_docs)]
pub const _NEWLIB_VERSION_H__: u32 = 1;
pub const _NEWLIB_VERSION: &[u8; 6] = b"4.1.0\0";
pub const __NEWLIB__: u32 = 4;
pub const __NEWLIB_MINOR__: u32 = 1;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 0;
pub const __SSP_FORTIFY_LEVEL: u32 = 0;
pub const _POSIX_THREADS: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 1;
pub const _POSIX_TIMERS: u32 = 1;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: u32 = 200112;
pub const _UNIX98_THREAD_MUTEX_ATTRIBUTES: u32 = 1;
pub const __have_longlong64: u32 = 1;
pub const __have_long32: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __int20: u32 = 2;
pub const __int20__: u32 = 2;
pub const __INT8: &[u8; 3] = b"hh\0";
pub const __INT16: &[u8; 2] = b"h\0";
pub const __INT64: &[u8; 3] = b"ll\0";
pub const __FAST8: &[u8; 3] = b"hh\0";
pub const __FAST16: &[u8; 2] = b"h\0";
pub const __FAST64: &[u8; 3] = b"ll\0";
pub const __LEAST8: &[u8; 3] = b"hh\0";
pub const __LEAST16: &[u8; 2] = b"h\0";
pub const __LEAST64: &[u8; 3] = b"ll\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const BME68X_IDX_T2_LSB: u32 = 0;
pub const BME68X_IDX_T2_MSB: u32 = 1;
pub const BME68X_IDX_T3: u32 = 2;
pub const BME68X_IDX_P1_LSB: u32 = 4;
pub const BME68X_IDX_P1_MSB: u32 = 5;
pub const BME68X_IDX_P2_LSB: u32 = 6;
pub const BME68X_IDX_P2_MSB: u32 = 7;
pub const BME68X_IDX_P3: u32 = 8;
pub const BME68X_IDX_P4_LSB: u32 = 10;
pub const BME68X_IDX_P4_MSB: u32 = 11;
pub const BME68X_IDX_P5_LSB: u32 = 12;
pub const BME68X_IDX_P5_MSB: u32 = 13;
pub const BME68X_IDX_P7: u32 = 14;
pub const BME68X_IDX_P6: u32 = 15;
pub const BME68X_IDX_P8_LSB: u32 = 18;
pub const BME68X_IDX_P8_MSB: u32 = 19;
pub const BME68X_IDX_P9_LSB: u32 = 20;
pub const BME68X_IDX_P9_MSB: u32 = 21;
pub const BME68X_IDX_P10: u32 = 22;
pub const BME68X_IDX_H2_MSB: u32 = 23;
pub const BME68X_IDX_H2_LSB: u32 = 24;
pub const BME68X_IDX_H1_LSB: u32 = 24;
pub const BME68X_IDX_H1_MSB: u32 = 25;
pub const BME68X_IDX_H3: u32 = 26;
pub const BME68X_IDX_H4: u32 = 27;
pub const BME68X_IDX_H5: u32 = 28;
pub const BME68X_IDX_H6: u32 = 29;
pub const BME68X_IDX_H7: u32 = 30;
pub const BME68X_IDX_T1_LSB: u32 = 31;
pub const BME68X_IDX_T1_MSB: u32 = 32;
pub const BME68X_IDX_GH2_LSB: u32 = 33;
pub const BME68X_IDX_GH2_MSB: u32 = 34;
pub const BME68X_IDX_GH1: u32 = 35;
pub const BME68X_IDX_GH3: u32 = 36;
pub const BME68X_IDX_RES_HEAT_VAL: u32 = 37;
pub const BME68X_IDX_RES_HEAT_RANGE: u32 = 39;
pub const BME68X_IDX_RANGE_SW_ERR: u32 = 41;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __int_least8_t = ::std::os::raw::c_schar;
pub type __uint_least8_t = ::std::os::raw::c_uchar;
pub type __int_least16_t = ::std::os::raw::c_short;
pub type __uint_least16_t = ::std::os::raw::c_ushort;
pub type __int_least32_t = ::std::os::raw::c_int;
pub type __uint_least32_t = ::std::os::raw::c_uint;
pub type __int_least64_t = ::std::os::raw::c_longlong;
pub type __uint_least64_t = ::std::os::raw::c_ulonglong;
pub type __intmax_t = ::std::os::raw::c_longlong;
pub type __uintmax_t = ::std::os::raw::c_ulonglong;
pub type __intptr_t = ::std::os::raw::c_int;
pub type __uintptr_t = ::std::os::raw::c_uint;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        16usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        8usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[doc = " @brief Bus communication function pointer which should be mapped to\n the platform specific read functions of the user\n\n @param[in]     reg_addr : 8bit register address of the sensor\n @param[out]    reg_data : Data from the specified address\n @param[in]     length   : Length of the reg_data array\n @param[in,out] intf_ptr : Void pointer that can enable the linking of descriptors\n                           for interface related callbacks\n @retval 0 for Success\n @retval Non-zero for Failure"]
pub type bme68x_read_fptr_t = ::std::option::Option<
    unsafe extern "C" fn(
        reg_addr: u8,
        reg_data: *mut u8,
        length: u32,
        intf_ptr: *mut ::std::os::raw::c_void,
    ) -> i8,
>;
#[doc = " @brief Bus communication function pointer which should be mapped to\n the platform specific write functions of the user\n\n @param[in]     reg_addr : 8bit register address of the sensor\n @param[out]    reg_data : Data to the specified address\n @param[in]     length   : Length of the reg_data array\n @param[in,out] intf_ptr : Void pointer that can enable the linking of descriptors\n                           for interface related callbacks\n @retval 0 for Success\n @retval Non-zero for Failure\n"]
pub type bme68x_write_fptr_t = ::std::option::Option<
    unsafe extern "C" fn(
        reg_addr: u8,
        reg_data: *const u8,
        length: u32,
        intf_ptr: *mut ::std::os::raw::c_void,
    ) -> i8,
>;
#[doc = " @brief Delay function pointer which should be mapped to\n delay function of the user\n\n @param period - The time period in microseconds\n @param[in,out] intf_ptr : Void pointer that can enable the linking of descriptors\n                           for interface related callbacks"]
pub type bme68x_delay_us_fptr_t =
    ::std::option::Option<unsafe extern "C" fn(period: u32, intf_ptr: *mut ::std::os::raw::c_void)>;
#[doc = " SPI interface"]
pub const bme68x_intf_BME68X_SPI_INTF: bme68x_intf = 0;
#[doc = " I2C interface"]
pub const bme68x_intf_BME68X_I2C_INTF: bme68x_intf = 1;
pub type bme68x_intf = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bme68x_data {
    #[doc = " Contains new_data, gasm_valid & heat_stab"]
    pub status: u8,
    #[doc = " The index of the heater profile used"]
    pub gas_index: u8,
    #[doc = " Measurement index to track order"]
    pub meas_index: u8,
    #[doc = " Heater resistance"]
    pub res_heat: u8,
    #[doc = " Current DAC"]
    pub idac: u8,
    #[doc = " Gas wait period"]
    pub gas_wait: u8,
    #[doc = " Temperature in degree celsius"]
    pub temperature: f32,
    #[doc = " Pressure in Pascal"]
    pub pressure: f32,
    #[doc = " Humidity in % relative humidity x1000"]
    pub humidity: f32,
    #[doc = " Gas resistance in Ohms"]
    pub gas_resistance: f32,
}
#[test]
fn bindgen_test_layout_bme68x_data() {
    const UNINIT: ::std::mem::MaybeUninit<bme68x_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bme68x_data>(),
        24usize,
        concat!("Size of: ", stringify!(bme68x_data))
    );
    assert_eq!(
        ::std::mem::align_of::<bme68x_data>(),
        4usize,
        concat!("Alignment of ", stringify!(bme68x_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_data),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gas_index) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_data),
            "::",
            stringify!(gas_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meas_index) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_data),
            "::",
            stringify!(meas_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res_heat) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_data),
            "::",
            stringify!(res_heat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idac) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_data),
            "::",
            stringify!(idac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gas_wait) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_data),
            "::",
            stringify!(gas_wait)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temperature) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_data),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pressure) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_data),
            "::",
            stringify!(pressure)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).humidity) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_data),
            "::",
            stringify!(humidity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gas_resistance) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_data),
            "::",
            stringify!(gas_resistance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bme68x_calib_data {
    #[doc = " Calibration coefficient for the humidity sensor"]
    pub par_h1: u16,
    #[doc = " Calibration coefficient for the humidity sensor"]
    pub par_h2: u16,
    #[doc = " Calibration coefficient for the humidity sensor"]
    pub par_h3: i8,
    #[doc = " Calibration coefficient for the humidity sensor"]
    pub par_h4: i8,
    #[doc = " Calibration coefficient for the humidity sensor"]
    pub par_h5: i8,
    #[doc = " Calibration coefficient for the humidity sensor"]
    pub par_h6: u8,
    #[doc = " Calibration coefficient for the humidity sensor"]
    pub par_h7: i8,
    #[doc = " Calibration coefficient for the gas sensor"]
    pub par_gh1: i8,
    #[doc = " Calibration coefficient for the gas sensor"]
    pub par_gh2: i16,
    #[doc = " Calibration coefficient for the gas sensor"]
    pub par_gh3: i8,
    #[doc = " Calibration coefficient for the temperature sensor"]
    pub par_t1: u16,
    #[doc = " Calibration coefficient for the temperature sensor"]
    pub par_t2: i16,
    #[doc = " Calibration coefficient for the temperature sensor"]
    pub par_t3: i8,
    #[doc = " Calibration coefficient for the pressure sensor"]
    pub par_p1: u16,
    #[doc = " Calibration coefficient for the pressure sensor"]
    pub par_p2: i16,
    #[doc = " Calibration coefficient for the pressure sensor"]
    pub par_p3: i8,
    #[doc = " Calibration coefficient for the pressure sensor"]
    pub par_p4: i16,
    #[doc = " Calibration coefficient for the pressure sensor"]
    pub par_p5: i16,
    #[doc = " Calibration coefficient for the pressure sensor"]
    pub par_p6: i8,
    #[doc = " Calibration coefficient for the pressure sensor"]
    pub par_p7: i8,
    #[doc = " Calibration coefficient for the pressure sensor"]
    pub par_p8: i16,
    #[doc = " Calibration coefficient for the pressure sensor"]
    pub par_p9: i16,
    #[doc = " Calibration coefficient for the pressure sensor"]
    pub par_p10: u8,
    #[doc = " Variable to store the intermediate temperature coefficient"]
    pub t_fine: f32,
    #[doc = " Heater resistance range coefficient"]
    pub res_heat_range: u8,
    #[doc = " Heater resistance value coefficient"]
    pub res_heat_val: i8,
    #[doc = " Gas resistance range switching error coefficient"]
    pub range_sw_err: i8,
}
#[test]
fn bindgen_test_layout_bme68x_calib_data() {
    const UNINIT: ::std::mem::MaybeUninit<bme68x_calib_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bme68x_calib_data>(),
        48usize,
        concat!("Size of: ", stringify!(bme68x_calib_data))
    );
    assert_eq!(
        ::std::mem::align_of::<bme68x_calib_data>(),
        4usize,
        concat!("Alignment of ", stringify!(bme68x_calib_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_h1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_h1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_h2) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_h2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_h3) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_h3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_h4) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_h4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_h5) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_h5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_h6) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_h6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_h7) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_h7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_gh1) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_gh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_gh2) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_gh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_gh3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_gh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_t1) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_t1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_t2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_t2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_t3) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_t3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_p1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_p1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_p2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_p2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_p3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_p3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_p4) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_p4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_p5) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_p5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_p6) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_p6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_p7) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_p7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_p8) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_p8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_p9) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_p9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).par_p10) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(par_p10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_fine) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(t_fine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res_heat_range) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(res_heat_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).res_heat_val) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(res_heat_val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range_sw_err) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_calib_data),
            "::",
            stringify!(range_sw_err)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bme68x_conf {
    #[doc = " Humidity oversampling. Refer @ref osx"]
    pub os_hum: u8,
    #[doc = " Temperature oversampling. Refer @ref osx"]
    pub os_temp: u8,
    #[doc = " Pressure oversampling. Refer @ref osx"]
    pub os_pres: u8,
    #[doc = " Filter coefficient. Refer @ref filter"]
    pub filter: u8,
    #[doc = " Standby time between sequential mode measurement profiles.\n Refer @ref odr"]
    pub odr: u8,
}
#[test]
fn bindgen_test_layout_bme68x_conf() {
    const UNINIT: ::std::mem::MaybeUninit<bme68x_conf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bme68x_conf>(),
        5usize,
        concat!("Size of: ", stringify!(bme68x_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<bme68x_conf>(),
        1usize,
        concat!("Alignment of ", stringify!(bme68x_conf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).os_hum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_conf),
            "::",
            stringify!(os_hum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).os_temp) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_conf),
            "::",
            stringify!(os_temp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).os_pres) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_conf),
            "::",
            stringify!(os_pres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_conf),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).odr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_conf),
            "::",
            stringify!(odr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bme68x_heatr_conf {
    #[doc = " Enable gas measurement. Refer @ref en_dis"]
    pub enable: u8,
    #[doc = " Store the heater temperature for forced mode degree Celsius"]
    pub heatr_temp: u16,
    #[doc = " Store the heating duration for forced mode in milliseconds"]
    pub heatr_dur: u16,
    #[doc = " Store the heater temperature profile in degree Celsius"]
    pub heatr_temp_prof: *mut u16,
    #[doc = " Store the heating duration profile in milliseconds"]
    pub heatr_dur_prof: *mut u16,
    #[doc = " Variable to store the length of the heating profile"]
    pub profile_len: u8,
    #[doc = " Variable to store heating duration for parallel mode\n in milliseconds"]
    pub shared_heatr_dur: u16,
}
#[test]
fn bindgen_test_layout_bme68x_heatr_conf() {
    const UNINIT: ::std::mem::MaybeUninit<bme68x_heatr_conf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bme68x_heatr_conf>(),
        20usize,
        concat!("Size of: ", stringify!(bme68x_heatr_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<bme68x_heatr_conf>(),
        4usize,
        concat!("Alignment of ", stringify!(bme68x_heatr_conf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_heatr_conf),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heatr_temp) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_heatr_conf),
            "::",
            stringify!(heatr_temp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heatr_dur) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_heatr_conf),
            "::",
            stringify!(heatr_dur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heatr_temp_prof) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_heatr_conf),
            "::",
            stringify!(heatr_temp_prof)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heatr_dur_prof) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_heatr_conf),
            "::",
            stringify!(heatr_dur_prof)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).profile_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_heatr_conf),
            "::",
            stringify!(profile_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared_heatr_dur) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_heatr_conf),
            "::",
            stringify!(shared_heatr_dur)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bme68x_dev {
    #[doc = " Chip Id"]
    pub chip_id: u8,
    #[doc = " The interface pointer is used to enable the user\n to link their interface descriptors for reference during the\n implementation of the read and write interfaces to the\n hardware."]
    pub intf_ptr: *mut ::std::os::raw::c_void,
    #[doc = "             Variant id\n ----------------------------------------\n     Value   |           Variant\n ----------------------------------------\n      0      |   BME68X_VARIANT_GAS_LOW\n      1      |   BME68X_VARIANT_GAS_HIGH\n ----------------------------------------"]
    pub variant_id: u32,
    #[doc = " SPI/I2C interface"]
    pub intf: bme68x_intf,
    #[doc = " Memory page used"]
    pub mem_page: u8,
    #[doc = " Ambient temperature in Degree C"]
    pub amb_temp: i8,
    #[doc = " Sensor calibration data"]
    pub calib: bme68x_calib_data,
    #[doc = " Read function pointer"]
    pub read: bme68x_read_fptr_t,
    #[doc = " Write function pointer"]
    pub write: bme68x_write_fptr_t,
    #[doc = " Delay function pointer"]
    pub delay_us: bme68x_delay_us_fptr_t,
    #[doc = " To store interface pointer error"]
    pub intf_rslt: i8,
    #[doc = " Store the info messages"]
    pub info_msg: u8,
}
#[test]
fn bindgen_test_layout_bme68x_dev() {
    const UNINIT: ::std::mem::MaybeUninit<bme68x_dev> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<bme68x_dev>(),
        84usize,
        concat!("Size of: ", stringify!(bme68x_dev))
    );
    assert_eq!(
        ::std::mem::align_of::<bme68x_dev>(),
        4usize,
        concat!("Alignment of ", stringify!(bme68x_dev))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chip_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(chip_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intf_ptr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(intf_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variant_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(variant_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intf) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(intf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_page) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(mem_page)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amb_temp) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(amb_temp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calib) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(calib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay_us) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(delay_us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intf_rslt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(intf_rslt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_msg) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(bme68x_dev),
            "::",
            stringify!(info_msg)
        )
    );
}
extern "C" {
    #[doc = " \\ingroup bme68xApiInit\n \\page bme68x_api_bme68x_init bme68x_init\n \\code\n int8_t bme68x_init(struct bme68x_dev *dev);\n \\endcode\n @details This API reads the chip-id of the sensor which is the first step to\n verify the sensor and also calibrates the sensor\n As this API is the entry point, call this API before using other APIs.\n\n @param[in,out] dev : Structure instance of bme68x_dev\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_init(dev: *mut bme68x_dev) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiRegister\n \\page bme68x_api_bme68x_set_regs bme68x_set_regs\n \\code\n int8_t bme68x_set_regs(const uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)\n \\endcode\n @details This API writes the given data to the register address of the sensor\n\n @param[in] reg_addr : Register addresses to where the data is to be written\n @param[in] reg_data : Pointer to data buffer which is to be written\n                       in the reg_addr of sensor.\n @param[in] len      : No of bytes of data to write\n @param[in,out] dev  : Structure instance of bme68x_dev\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_set_regs(
        reg_addr: *const u8,
        reg_data: *const u8,
        len: u32,
        dev: *mut bme68x_dev,
    ) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiRegister\n \\page bme68x_api_bme68x_get_regs bme68x_get_regs\n \\code\n int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)\n \\endcode\n @details This API reads the data from the given register address of sensor.\n\n @param[in] reg_addr  : Register address from where the data to be read\n @param[out] reg_data : Pointer to data buffer to store the read data.\n @param[in] len       : No of bytes of data to be read.\n @param[in,out] dev   : Structure instance of bme68x_dev.\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_get_regs(reg_addr: u8, reg_data: *mut u8, len: u32, dev: *mut bme68x_dev) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiSystem\n \\page bme68x_api_bme68x_soft_reset bme68x_soft_reset\n \\code\n int8_t bme68x_soft_reset(struct bme68x_dev *dev);\n \\endcode\n @details This API soft-resets the sensor.\n\n @param[in,out] dev : Structure instance of bme68x_dev.\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_soft_reset(dev: *mut bme68x_dev) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiOm\n \\page bme68x_api_bme68x_set_op_mode bme68x_set_op_mode\n \\code\n int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev);\n \\endcode\n @details This API is used to set the operation mode of the sensor\n @param[in] op_mode : Desired operation mode.\n @param[in] dev     : Structure instance of bme68x_dev\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_set_op_mode(op_mode: u8, dev: *mut bme68x_dev) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiOm\n \\page bme68x_api_bme68x_get_op_mode bme68x_get_op_mode\n \\code\n int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev);\n \\endcode\n @details This API is used to get the operation mode of the sensor.\n\n @param[out] op_mode : Desired operation mode.\n @param[in,out] dev : Structure instance of bme68x_dev\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_get_op_mode(op_mode: *mut u8, dev: *mut bme68x_dev) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiConfig\n \\page bme68x_api_bme68x_get_meas_dur bme68x_get_meas_dur\n \\code\n uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev);\n \\endcode\n @details This API is used to get the remaining duration that can be used for heating.\n\n @param[in] op_mode : Desired operation mode.\n @param[in] conf    : Desired sensor configuration.\n @param[in] dev     : Structure instance of bme68x_dev\n\n @return Measurement duration calculated in microseconds"]
    pub fn bme68x_get_meas_dur(op_mode: u8, conf: *mut bme68x_conf, dev: *mut bme68x_dev) -> u32;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiData\n \\page bme68x_api_bme68x_get_data bme68x_get_data\n \\code\n int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev);\n \\endcode\n @details This API reads the pressure, temperature and humidity and gas data\n from the sensor, compensates the data and store it in the bme68x_data\n structure instance passed by the user.\n\n @param[in]  op_mode : Expected operation mode.\n @param[out] data    : Structure instance to hold the data.\n @param[out] n_data  : Number of data instances available.\n @param[in,out] dev  : Structure instance of bme68x_dev\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_get_data(
        op_mode: u8,
        data: *mut bme68x_data,
        n_data: *mut u8,
        dev: *mut bme68x_dev,
    ) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiConfig\n \\page bme68x_api_bme68x_set_conf bme68x_set_conf\n \\code\n int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev);\n \\endcode\n @details This API is used to set the oversampling, filter and odr configuration\n\n @param[in] conf    : Desired sensor configuration.\n @param[in,out] dev : Structure instance of bme68x_dev.\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_set_conf(conf: *mut bme68x_conf, dev: *mut bme68x_dev) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiConfig\n \\page bme68x_api_bme68x_get_conf bme68x_get_conf\n \\code\n int8_t bme68x_get_conf(struct bme68x_conf *conf, struct bme68x_dev *dev);\n \\endcode\n @details This API is used to get the oversampling, filter and odr\n configuration\n\n @param[out] conf   : Present sensor configuration.\n @param[in,out] dev : Structure instance of bme68x_dev.\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_get_conf(conf: *mut bme68x_conf, dev: *mut bme68x_dev) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiConfig\n \\page bme68x_api_bme68x_set_heatr_conf bme68x_set_heatr_conf\n \\code\n int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev);\n \\endcode\n @details This API is used to set the gas configuration of the sensor.\n\n @param[in] op_mode : Expected operation mode of the sensor.\n @param[in] conf    : Desired heating configuration.\n @param[in,out] dev : Structure instance of bme68x_dev.\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_set_heatr_conf(
        op_mode: u8,
        conf: *const bme68x_heatr_conf,
        dev: *mut bme68x_dev,
    ) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiConfig\n \\page bme68x_api_bme68x_get_heatr_conf bme68x_get_heatr_conf\n \\code\n int8_t bme68x_get_heatr_conf(const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev);\n \\endcode\n @details This API is used to get the gas configuration of the sensor.\n\n @param[out] conf   : Current configurations of the gas sensor.\n @param[in,out] dev : Structure instance of bme68x_dev.\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_get_heatr_conf(conf: *const bme68x_heatr_conf, dev: *mut bme68x_dev) -> i8;
}
extern "C" {
    #[doc = " \\ingroup bme68xApiSystem\n \\page bme68x_api_bme68x_selftest_check bme68x_selftest_check\n \\code\n int8_t bme68x_selftest_check(const struct bme68x_dev *dev);\n \\endcode\n @details This API performs Self-test of low gas variant of BME68X\n\n @param[in, out]   dev  : Structure instance of bme68x_dev\n\n @return Result of API execution status\n @retval 0 -> Success\n @retval < 0 -> Fail"]
    pub fn bme68x_selftest_check(dev: *const bme68x_dev) -> i8;
}
